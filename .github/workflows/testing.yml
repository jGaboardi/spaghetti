 name: Continuous Integration
 
 on:
   push:
     branches:
       - '*'
   pull_request:
     branches:
       - '*'
   schedule:
       - cron: '59 23 * * *'
   workflow_dispatch:
     inputs:
       version:
         description: Manual Unittest Run
         default: test
         required: false

 jobs:
   linting:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-python@v4
        - uses: pre-commit/action@v3.0.0

   testing:
     needs: linting
     env:
       RUN_TEST: pytest -v -n auto spaghetti --cov spaghetti --doctest-modules --cov-config .coveragerc --cov-report xml --color yes --cov-append --cov-report term-missing --timeout 60
     name: ${{ matrix.os }}, ${{ matrix.environment-file }}
     runs-on: ${{ matrix.os }}
     timeout-minutes: 30
     strategy:
       matrix:
         os: [ubuntu-latest]
         environment-file:
           - ci/38.yaml
           - ci/39.yaml
           - ci/310.yaml
           - ci/310-BASE.yaml
           - ci/310-DEV.yaml
           - ci/310-DEV_shapely_dev.yaml
         include:
           - environment-file: ci/310.yaml
             os: macos-latest
           - environment-file: ci/310.yaml
             os: windows-latest
     
     steps:
       - name: checkout repo
         uses: actions/checkout@v3
       
       - name: setup micromamba
         uses: mamba-org/provision-with-micromamba@main
         with:
           environment-file: ${{ matrix.environment-file }}
           micromamba-version: 'latest'
           channel-priority: 'flexible'
      
       - name: install bleeding edge libpysal & esda (Ubuntu / Python 3.10)
         shell: bash -l {0}
         run: |
           pip install git+https://github.com/pysal/libpysal.git@master
           pip install git+https://github.com/pysal/esda.git@master
         if: matrix.os == 'ubuntu-latest' && contains(matrix.environment-file, 'DEV')
       
       - name: run tests - bash
         shell: bash -l {0}
         run: ${{ env.RUN_TEST }}
         if: matrix.os != 'windows-latest'
       
       - name: run tests - powershell
         shell: powershell
         run: ${{ env.RUN_TEST }}
         if: matrix.os == 'windows-latest'
       
       - name: codecov
         uses: codecov/codecov-action@v3
         with:
           token: ${{ secrets.CODECOV_TOKEN }}
           file: ./coverage.xml
           name: spaghetti-codecov
